%!PS-Adobe-3.0
%%BoundingBox: 54 72 558 720
%%Creator: Mozilla (NetScape) HTML->PS
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 5
%%PageOrder: Ascend
%%Title: White Paper: Document Processing in the PIA
%%EndComments
%%BeginProlog
[ /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
 /two /three /four /five /six /seven /eight /nine /colon /semicolon
 /less /equal /greater /question /at /A /B /C /D /E
 /F /G /H /I /J /K /L /M /N /O
 /P /Q /R /S /T /U /V /W /X /Y
 /Z /bracketleft /backslash /bracketright /asciicircum /underscore /quoteleft /a /b /c
 /d /e /f /g /h /i /j /k /l /m
 /n /o /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /space /exclamdown /cent /sterling /currency /yen /brokenbar /section /dieresis /copyright
 /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf
 /threequarters /questiondown /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth /Ntilde
 /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
 /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
 /eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide /oslash /ugrave
 /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis] /isolatin1encoding exch def
/c { matrix currentmatrix currentpoint translate
     3 1 roll scale newpath 0 0 1 0 360 arc setmatrix } bind def
/F0
    /Times-Roman findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f0 { /F0 findfont exch scalefont setfont } bind def
/F1
    /Times-Bold findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f1 { /F1 findfont exch scalefont setfont } bind def
/F2
    /Times-Italic findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f2 { /F2 findfont exch scalefont setfont } bind def
/F3
    /Times-BoldItalic findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f3 { /F3 findfont exch scalefont setfont } bind def
/F4
    /Courier findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f4 { /F4 findfont exch scalefont setfont } bind def
/F5
    /Courier-Bold findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f5 { /F5 findfont exch scalefont setfont } bind def
/F6
    /Courier-Oblique findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f6 { /F6 findfont exch scalefont setfont } bind def
/F7
    /Courier-BoldOblique findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f7 { /F7 findfont exch scalefont setfont } bind def
/rhc {
    {
        currentfile read {
	    dup 97 ge
		{ 87 sub true exit }
		{ dup 48 ge { 48 sub true exit } { pop } ifelse }
	    ifelse
	} {
	    false
	    exit
	} ifelse
    } loop
} bind def

/cvgray { % xtra_char npix cvgray - (string npix long)
    dup string
    0
    {
	rhc { cvr 4.784 mul } { exit } ifelse
	rhc { cvr 9.392 mul } { exit } ifelse
	rhc { cvr 1.824 mul } { exit } ifelse
	add add cvi 3 copy put pop
	1 add
	dup 3 index ge { exit } if
    } loop
    pop
    3 -1 roll 0 ne { rhc { pop } if } if
    exch pop
} bind def

/smartimage12rgb { % w h b [matrix] smartimage12rgb -
    /colorimage where {
	pop
	{ currentfile rowdata readhexstring pop }
	false 3
	colorimage
    } {
	exch pop 8 exch
	3 index 12 mul 8 mod 0 ne { 1 } { 0 } ifelse
	4 index
	6 2 roll
	{ 2 copy cvgray }
	image
	pop pop
    } ifelse
} def
/cshow { dup stringwidth pop 2 div neg 0 rmoveto show } bind def
/rshow { dup stringwidth pop neg 0 rmoveto show } bind def
/BeginEPSF {
  /b4_Inc_state save def
  /dict_count countdictstack def
  /op_count count 1 sub def
  userdict begin
  /showpage {} def
  0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
  10 setmiterlimit [] 0 setdash newpath
  /languagelevel where
  { pop languagelevel 1 ne
    { false setstrokeadjust false setoverprint } if
  } if
} bind def
/EndEPSF {
  count op_count sub {pop} repeat
  countdictstack dict_count sub {end} repeat
  b4_Inc_state restore
} bind def
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 697.5 moveto
24 f1
(Ri) show
23.9 697.5 moveto
24 f3
(Source.org) show
132.5 697.5 moveto
24 f1
( / ) show
151.1 697.5 moveto
24 f1
(White Papers) show
290.4 697.5 moveto
24 f1
( / Document) show
0 669.9 moveto
24 f1
(Processing in the PIA) show
0 638.4 moveto
14 f1
(Table of Contents) show
0 598.1 moveto
12 f0
(    ) show
11.9 598.1 moveto
12 f0
(1: Overview) show
71.5 598.1 moveto
12 f0
( ) show
0 584.8 moveto
12 f0
(        ) show
23.9 584.8 moveto
10 f0
(1.1: Document-Oriented Computing) show
169.1 584.8 moveto
12 f0
( ) show
0 571.5 moveto
12 f0
(        ) show
23.9 571.5 moveto
10 f0
(1.2: Examples) show
81.1 571.5 moveto
12 f0
( ) show
0 558.2 moveto
12 f0
(    ) show
11.9 558.2 moveto
12 f0
(2: Tags All the Way Down) show
141.5 558.2 moveto
12 f0
( ) show
0 544.9 moveto
12 f0
(        ) show
23.9 544.9 moveto
10 f0
(2.1: How it works) show
96.1 544.9 moveto
12 f0
( ) show
0 531.6 moveto
12 f0
(        ) show
23.9 531.6 moveto
10 f0
(2.2: Multiple Views) show
104.1 531.6 moveto
12 f0
( ) show
0 518.3 moveto
12 f0
(        ) show
23.9 518.3 moveto
10 f0
(2.3: Combining Information and Processing) show
199.7 518.3 moveto
12 f0
( ) show
0 505 moveto
12 f0
(        ) show
23.9 505 moveto
10 f0
(2.4: Separating Input, Processing, and Output) show
206.1 505 moveto
12 f0
( ) show
0 491.7 moveto
12 f0
(    ) show
11.9 491.7 moveto
12 f0
(3: The DPS and Standards) show
138.5 491.7 moveto
12 f0
( ) show
0 478.4 moveto
12 f0
(        ) show
23.9 478.4 moveto
10 f0
(3.1: Choice of Syntax: HTML or XML) show
180.2 478.4 moveto
12 f0
( ) show
0 465.1 moveto
12 f0
(        ) show
23.9 465.1 moveto
10 f0
(3.2: Application Programming Interfaces) show
188.3 465.1 moveto
12 f0
( ) show
0 432.4 moveto
18 f1
(1:) show
14.9 432.4 moveto
18 f1
( Overview) show
0 404.5 moveto
12 f0
(The PIA's ) show
52.6 404.5 moveto
12 f2
(Document Processing System) show
194.5 404.5 moveto
12 f0
( \(DPS\) is fundamentally a document formatting system) show
0 391.2 moveto
12 f0
(masquerading as a macro language. \(Programmers may be more comfortable thinking of it as a simple) show
0 377.9 moveto
12 f0
(programming language optimized for document processing\). The most unusual feature of the system is) show
0 364.6 moveto
12 f0
(that the input documents, output documents, and processing instructions ) show
349.6 364.6 moveto
12 f2
(all have the same syntax) show
466.9 364.6 moveto
12 f0
( --) show
0 351.3 moveto
12 f0
(XML \(or a less strict superset that includes HTML the way most people write it\). ) show
0 322.4 moveto
14 f1
(1.1:) show
22.1 322.4 moveto
14 f1
( Document-Oriented Computing) show
0 295.4 moveto
12 f0
(In many ways, the PIA represents a new way of using computers on the Web, which we call) show
0 282.1 moveto
12 f0
(``) show
7.9 282.1 moveto
12 f2
(Document-Oriented Computing) show
160.2 282.1 moveto
12 f0
(.'' It reflects the realization that, not only does the Web consist entirely) show
0 268.8 moveto
12 f0
(of documents, but that documents and document fragments have become the basic objects of) show
0 255.5 moveto
12 f0
(computation for web applications. They are stored on servers, passed from servers to clients, operated on) show
0 242.2 moveto
12 f0
(by style sheets \(which are ) show
126.9 242.2 moveto
12 f2
(also) show
146.9 242.2 moveto
12 f0
( documents\), cached in files, and so on. ) show
0 215.6 moveto
12 f0
(Just as numbers are the basic objects of computation for a spreadsheet or a ``number-crunching'') show
0 202.3 moveto
12 f0
(application, just as images and pixels are the basic objects of games and presentation programs,) show
0 189 moveto
12 f0
(documents and their components are the basic objects of computation for the PIA. The PIA goes further) show
0 175.7 moveto
12 f0
(than traditional applications, however: because the PIA allows documents to be active, it is possible to) show
0 162.4 moveto
12 f0
(build complete applications using ) show
164.6 162.4 moveto
12 f2
(nothing but documents) show
273.9 162.4 moveto
12 f0
(. ) show
0 135.8 moveto
12 f0
(A ``style sheet'' is a simple example of an active document: it specifies how some other document is) show
0 122.5 moveto
12 f0
(supposed to be formatted for presentation in a browser, or for printing. An ``active server page'' is) show
0 109.2 moveto
12 f0
(another example: it consists of an ordinary HTML document with some fragments of program) show
0 95.9 moveto
12 f0
(embedded in it, which are interpreted by the server. ) show
pagelevel restore
showpage
%%Page: 2 2
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 709.2 moveto
12 f0
(The difference in the PIA is that active documents don't contain pieces of code in some programming) show
0 695.9 moveto
12 f0
(language. Instead, the PIA simply associates actions with some of the document's ``tags.'' Some tags) show
0 682.6 moveto
12 f0
(\(about two dozen\) are predefined, others can be defined as needed by the application designer. ) show
0 653.7 moveto
14 f1
(1.2:) show
22.1 653.7 moveto
14 f1
( Examples) show
0 626.7 moveto
12 f0
(For example, this is all one needs to do in order to create a ``footer'' tag to go at the bottom of every) show
0 613.4 moveto
12 f0
(document on your web site: ) show
28 589.5 moveto
10 f4
(<define element="footer" empty="yes">) show
28 579 moveto
10 f4
(  <action>) show
28 568.5 moveto
10 f4
(    <b><i>Copyright 1999 ) show
28 558 moveto
10 f4
(        <a href="http://RiSource.org/">RiSource.org</a></i></b><br>) show
28 547.5 moveto
10 f4
(  </action>) show
28 537 moveto
10 f4
(</define>) show
0 513.3 moveto
12 f0
(Notice the way this definition mixes ordinary HTML tags with a small number of ``active tags'' --) show
0 500 moveto
10 f4
(<define>) show
48 500 moveto
12 f0
( and ) show
71.3 500 moveto
10 f4
(<action>) show
119.3 500 moveto
12 f0
( in this case. ) show
0 473.4 moveto
12 f0
(The document being processed need not be a local file -- it can come from anywhere on the Web, and) show
0 460.1 moveto
12 f0
(processing need not be confined to simple substitution. For example, here is a fragment of PIA code that) show
0 446.8 moveto
12 f0
(extracts all of the links from a web page and presents them as a bulleted list: ) show
28 422.9 moveto
10 f4
(<ul>) show
28 412.4 moveto
10 f4
(  <repeat>) show
28 401.9 moveto
10 f4
(    <foreach entity="link">) show
28 391.4 moveto
10 f4
(      <extract><from><include src="http://RiSource.org/"/></from>) show
28 380.9 moveto
10 f4
(               <name all="yes">a</name>) show
28 370.4 moveto
10 f4
(      </extract>) show
28 359.9 moveto
10 f4
(    </foreach>) show
28 349.4 moveto
10 f4
(    <li> &link; </li>) show
28 338.9 moveto
10 f4
(  </repeat>) show
28 328.4 moveto
10 f4
(</ul>  ) show
0 304.7 moveto
12 f0
(Something only slightly more complicated could be used to prepare a site index. ) show
0 272 moveto
18 f1
(2:) show
14.9 272 moveto
18 f1
( Tags All the Way Down) show
28 230.8 moveto
12 f0
(``The world is supported on the backs of four elephants standing on the shell of a giant) show
28 217.5 moveto
12 f0
(turtle.'' ) show
28 204.2 moveto
12 f0
(``And what is the turtle standing on?'' ) show
28 190.9 moveto
12 f0
(``You're very clever, young man, but it's turtles all the way down.'' ) show
118.5 177.6 moveto
12 f0
(-- ) show
129.4 177.6 moveto
12 f2
(told of William James, Bertrand Russell, and others; see ) show
403.7 177.6 moveto
12 f2
(here) show
425 177.6 moveto
12 f2
( and ) show
448.9 177.6 moveto
12 f2
(here) show
470.2 177.6 moveto
12 f2
(.) show
473.1 177.6 moveto
12 f0
( ) show
0 151 moveto
12 f0
(The PIA's document processing is ) show
168.3 151 moveto
12 f2
(entirely) show
204.9 151 moveto
12 f0
( XML-based; there are no snippets with other syntax) show
0 137.7 moveto
12 f0
(embedded in attributes or text. All of the actions of the document processing system are performed by) show
0 124.4 moveto
12 f0
(associating actions with tags. ) show
0 97.8 moveto
12 f0
(This makes the PIA completely compatible with existing XML toolsets. But because the parser used is) show
0 84.5 moveto
12 f2
(also) show
20 84.5 moveto
12 f0
( capable of dealing with standard HTML and many other SGML-based markup languages, it can) show
pagelevel restore
showpage
%%Page: 3 3
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 709.2 moveto
12 f2
(also) show
20 709.2 moveto
12 f0
( be used to process documents from a wide variety of sources, including those generated by) show
0 695.9 moveto
12 f0
(programs or created using simple text editors. ) show
0 667 moveto
14 f1
(2.1:) show
22.1 667 moveto
14 f1
( How it works) show
0 640 moveto
12 f0
(The DPS works by making a single pass over a document, performing the ) show
357.2 640 moveto
12 f2
(actions) show
391.8 640 moveto
12 f0
( that are associated) show
0 626.7 moveto
12 f0
(with the tags in the document. The default action for any unknown tag is simply to copy it. \(More) show
0 613.4 moveto
12 f0
(correctly, to copy the start tag and its corresponding end tag, and to ) show
327 613.4 moveto
12 f2
(process) show
363.6 613.4 moveto
12 f0
( the contents.\) ) show
0 586.8 moveto
12 f0
(The action associated with a tag can either be a ) show
229.2 586.8 moveto
12 f2
(definition) show
275.2 586.8 moveto
12 f0
( -- a document fragment that simply replaces) show
0 573.5 moveto
12 f0
(the tag in the document; or a ) show
141.1 573.5 moveto
12 f2
(primitive) show
184.4 573.5 moveto
12 f0
( -- an action defined by the implementation, in some programming) show
0 560.2 moveto
12 f0
(language. The set of primitives is small, but sufficiently powerful that any possible document) show
0 546.9 moveto
12 f0
(transformation can be performed. The set of tag definitions used to process a document is called a) show
0 533.6 moveto
12 f2
(tagset) show
28.8 533.6 moveto
12 f0
(. ) show
0 507 moveto
12 f0
(The DPS is implemented as a ``processor'' situated between an ``input'' which functions as a parser or) show
0 493.7 moveto
12 f0
(parse-tree traverser, and an ``output'' which functions as a tree ) show
304.8 493.7 moveto
12 f2
(builder) show
339.7 493.7 moveto
12 f0
(. In most cases the input and) show
0 480.4 moveto
12 f0
(output tree structures can be entirely virtual. ) show
0 453.8 moveto
12 f0
(This approach has several advantages: ) show
18.1 431.3 moveto
3.3 3.3 c  fill 
28 427.2 moveto
12 f0
(All transformations on the document are ) show
225.3 427.2 moveto
12 f2
(local) show
249.3 427.2 moveto
12 f0
(: a tag's action can affect only the element and its) show
28 413.9 moveto
12 f0
(contents. ) show
18.1 404.7 moveto
3.3 3.3 c  fill 
28 400.6 moveto
12 f0
(A simple consequence of this locality is that, once a part of a document has been processed, it) show
28 387.3 moveto
12 f0
(never needs to be looked at again. This means that the DPS can handle documents that are too) show
28 374 moveto
12 f0
(large to fit in the computer's memory, making the DPS useable in embedded applications. ) show
18.1 364.8 moveto
3.3 3.3 c  fill 
28 360.7 moveto
12 f0
(Because the DPS operates on ``parse trees'' rather than on strings, it is ) show
369.9 360.7 moveto
12 f2
(impossible) show
421.2 360.7 moveto
12 f0
( to produce a) show
28 347.4 moveto
12 f0
(document that is syntactically incorrect -- the output document is always well-formed. ) show
18.1 338.2 moveto
3.3 3.3 c  fill 
28 334.1 moveto
12 f0
(But because the DPS is not restricted to XML parsers, it is not necessary for the ) show
414.2 334.1 moveto
12 f2
(input) show
439 334.1 moveto
12 f0
( to be) show
28 320.8 moveto
12 f0
(well-formed XML -- it might be HTML or even something entirely different. ) show
18.1 311.6 moveto
3.3 3.3 c  fill 
28 307.5 moveto
12 f0
(Because the set of primitives is small and the syntax of the language is ) show
370.7 307.5 moveto
12 f2
(pure) show
392.6 307.5 moveto
12 f0
( XML or HTML, the) show
28 294.2 moveto
12 f0
(DPS is easily implemented in any programming language. Although the current implementation) show
28 280.9 moveto
12 f0
(language is Java, an earlier version was written in Perl, and a version in C is being contemplated. ) show
18.1 271.7 moveto
3.3 3.3 c  fill 
28 267.6 moveto
12 f0
(Because the set of tag definitions is separate from the document being processed, it is possible to) show
28 254.3 moveto
12 f0
(process the same document in multiple ways. \(We will examine this further in the next section.\) ) show
18.1 245.1 moveto
3.3 3.3 c  fill 
28 241 moveto
12 f0
(Again because the definitions are separate from the document, the DPS is inherently secure: by) show
28 227.7 moveto
12 f0
(restricting the set of primitives available when processing a document, it is easy to prevent a) show
28 214.4 moveto
12 f0
(document ``imported'' from some other web site from affecting local files or accessing other sites.) show
28 201.1 moveto
12 f0
(At the same time, documents that are part of a PIA-based application need ) show
387.9 201.1 moveto
12 f2
(not) show
403.4 201.1 moveto
12 f0
( be so restricted. ) show
18.1 191.9 moveto
3.3 3.3 c  fill 
28 187.8 moveto
12 f0
(On the other hand, by making a more complete set of primitives available to it, a single document) show
28 174.5 moveto
12 f0
(can be made to specify both an HTML form, and the associated processing. The advantages of this) show
28 161.2 moveto
12 f0
(can be easily seen in the PIA, which allows ) show
239.2 161.2 moveto
12 f2
(complete web-based applications) show
399.1 161.2 moveto
12 f0
( to be built entirely) show
28 147.9 moveto
12 f0
(without the use of ``traditional'' programming languages or scripts. ) show
0 119 moveto
14 f1
(2.2:) show
22.1 119 moveto
14 f1
( Multiple Views) show
0 92 moveto
12 f0
(One of the major advantages of the DPS is that a document can be processed using different tagsets for) show
0 78.7 moveto
12 f0
(different purposes. There are several applications of this in the PIA; others will no doubt spring to mind. ) show
pagelevel restore
showpage
%%Page: 4 4
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
18.1 704.2 moveto
3.3 3.3 c  fill 
28 700.1 moveto
12 f0
(Style. Because ) show
101.6 700.1 moveto
12 f2
(any) show
118.9 700.1 moveto
12 f0
( tag can have a definition, it's easy to apply ``styles'' to ordinary HTML) show
28 686.8 moveto
12 f0
(documents. A document can be a mixture of invented tags \(for example, ) show
377.9 686.8 moveto
10 f4
(<header>) show
425.9 686.8 moveto
12 f0
( and ) show
449.2 686.8 moveto
10 f4
(<footer>) show
497.2 686.8 moveto
12 f0
(\)) show
28 673.5 moveto
12 f0
(and ordinary HTML tags. ) show
18.1 664.3 moveto
3.3 3.3 c  fill 
28 660.2 moveto
12 f0
(Formatting. Something we aren't doing at the moment, but could do rather easily, is formatting) show
28 646.9 moveto
12 f0
(HTML pages \(for a printer, for example\). ) show
18.1 637.7 moveto
3.3 3.3 c  fill 
28 633.6 moveto
12 f0
(Documentation. One of the things we do in the PIA is to automatically generate documentation for) show
28 620.3 moveto
12 f0
(our tagsets. We do this by means of a specialized tagset, ) show
300.9 620.3 moveto
10 f4
(tsdoc.ts) show
348.9 620.3 moveto
12 f0
(, that redefines the ) show
440.5 620.3 moveto
10 f4
(<define>) show
28 607 moveto
12 f0
(tag. ) show
18.1 597.8 moveto
3.3 3.3 c  fill 
28 593.7 moveto
12 f0
(Extraction. It's easy in the DPS to extract information \(all images, for example, or all headings\)) show
28 580.4 moveto
12 f0
(from a document. ) show
0 551.5 moveto
14 f1
(2.3:) show
22.1 551.5 moveto
14 f1
( Combining Information and Processing) show
0 524.5 moveto
12 f0
(As we have seen, the PIA allows information and processing to be mixed in the same document, using) show
0 511.2 moveto
12 f0
(the same XML-derived syntax. This has several benefits: ) show
18.1 488.7 moveto
3.3 3.3 c  fill 
28 484.6 moveto
12 f0
(Processing and document never become separated, making them less likely to get out of sync. ) show
18.1 475.4 moveto
3.3 3.3 c  fill 
28 471.3 moveto
12 f0
(Because processing has the same syntax as the document, only one set of editing tools is needed. ) show
18.1 462.1 moveto
3.3 3.3 c  fill 
28 458 moveto
12 f0
(Files that contain primarily processing instructions, for example tagsets and configuration files, are) show
28 444.7 moveto
12 f0
(nevertheless perfectly valid documents and can be treated as such. This allows software and its) show
28 431.4 moveto
12 f0
(documentation to stay together. Tagsets and configuration files can easily be turned into readable) show
28 418.1 moveto
12 f0
(HTML or printed documentation. ) show
0 389.2 moveto
14 f1
(2.4:) show
22.1 389.2 moveto
14 f1
( Separating Input, Processing, and Output) show
0 362.2 moveto
12 f0
(The PIA has separate interfaces \(API's\) for input, output, and processor objects. ) show
18.1 339.2 moveto
3.3 3.3 c  fill 
28 335.1 moveto
12 f1
(Input) show
28 321.8 moveto
12 f0
(is essentially a ``document traverser'' -- it includes the methods necessary for making a single) show
28 308.5 moveto
12 f0
(left-to-right, top-down pass through a document's parse tree. An important feature of the Input) show
28 295.2 moveto
12 f0
(interface, however, is that the tree never has to exist in its complete form. ) show
18.1 272.2 moveto
3.3 3.3 c  fill 
28 268.1 moveto
12 f1
(Output) show
28 254.8 moveto
12 f0
(defines the interface for a ``document constructor.'' As with the Input interface, the document) show
28 241.5 moveto
12 f0
(produced need not be a DOM tree; it might be a character stream, a string, or a SAX application. ) show
18.1 231.8 moveto
3.3 3.3 c  fill 
28 227.7 moveto
12 f1
(Processor) show
28 214.4 moveto
12 f0
(defines the interface for the classes that actually process documents. A Processor implementation) show
28 201.1 moveto
12 f0
(can operate in either of two modes: ``pull mode,'' in which the document is supplied by an Input,) show
28 187.8 moveto
12 f0
(and ``push mode,'' in which the Processor is ``driven'' by an Output. The latter is necessary for) show
28 174.5 moveto
12 f0
(interfacing to ``event-driven'' parsers such as those that use the popular SAX interface. ) show
0 141.8 moveto
18 f1
(3:) show
14.9 141.8 moveto
18 f1
( The DPS and Standards) show
0 111.6 moveto
14 f1
(3.1:) show
22.1 111.6 moveto
14 f1
( Choice of Syntax: HTML or XML) show
0 84.6 moveto
12 f0
(The DPS's parser is capable of handling ) show
196.2 84.6 moveto
12 f2
(either) show
224.4 84.6 moveto
12 f0
( XML or HTML syntax -- the parser's degree of) show
pagelevel restore
showpage
%%Page: 5 5
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 709.2 moveto
12 f0
(``strictness'' in handling things like omitted end tags or minimized attributes is specified in the tagset. ) show
0 682.6 moveto
12 f0
(Unlike a ``pure XML'' system, this means that HTML documents can be ``imported'' from other web) show
0 669.3 moveto
12 f0
(sites and processed using the DPS. It also means that standard HTML authoring tools can be used to) show
0 656 moveto
12 f0
(create documents. ) show
0 629.4 moveto
12 f0
(But the option of using XML means that the DPS can ) show
260.3 629.4 moveto
12 f2
(create) show
290.2 629.4 moveto
12 f0
( documents that ) show
369.1 629.4 moveto
12 f2
(are) show
385 629.4 moveto
12 f0
( pure XML. This is true) show
0 616.1 moveto
12 f0
(even if the input format is HTML, so that the DPS is easily integrated into any XML-based system. ) show
0 587.2 moveto
14 f1
(3.2:) show
22.1 587.2 moveto
14 f1
( Application Programming Interfaces) show
0 560.2 moveto
12 f0
(There are two major API's in use in the Java/XML community: SAX and the DOM. The DPS works) show
0 546.9 moveto
12 f0
(well with both. ) show
18.1 524.4 moveto
3.3 3.3 c  fill 
28 520.3 moveto
12 f0
(SAX is the Simple API for XML. It is designed as the interface between a parser or ``driver'' and) show
28 507 moveto
12 f0
(an ``application.'' It is ``event-driven,'' in the sense that an ``event handler'' in the application is) show
28 493.7 moveto
12 f0
(called by the driver for every ``node'' in the document's parse tree. The DPS can use the SAX) show
28 480.4 moveto
12 f0
(interface ``at both ends'' -- the processor can be driven by a SAX driver, and it can drive a SAX) show
28 467.1 moveto
12 f0
(application. ) show
28 440.5 moveto
12 f0
(This versatility means that the PIA can be easily inserted into a SAX ``tool chain'' to perform) show
28 427.2 moveto
12 f0
(special-purpose processing ) show
160.6 427.2 moveto
12 f2
(between) show
199.9 427.2 moveto
12 f0
( the parser and the application. ) show
18.1 404.7 moveto
3.3 3.3 c  fill 
28 400.6 moveto
12 f0
(DOM is the Document Object Model -- a language-independent set of interfaces for manipulating) show
28 387.3 moveto
12 f0
(document parse trees. The PIA uses its own, extended implementation of the DOM as its internal) show
28 374 moveto
12 f0
(representation, but because of the extensions it is not really suitable for use in other applications.) show
28 360.7 moveto
12 f0
(However, ) show
77.9 360.7 moveto
12 f2
(any) show
95.2 360.7 moveto
12 f0
( DOM implementation can be used as an input or output for the PIA, making the) show
28 347.4 moveto
12 f0
(PIA suitable for use with other DOM-based software such as XML databases and document) show
28 334.1 moveto
12 f0
(managers. ) show
0 311.7 moveto
504 0 rlineto 0 -1.4 rlineto -504 0 rlineto closepath  fill 
0 293.7 moveto
12 f1
(Copyright \251 1997-1999 Ricoh Silicon Valley) show
0 279.9 moveto
12 f1
($Id$) show
0 266.8 moveto
12 f2
(Stephen R. Savitzky) show
93.6 266.8 moveto
12 f2
( < ) show
107.6 266.8 moveto
12 f2
(steve@rsv.ricoh.com) show
208.6 266.8 moveto
12 f2
(>) show
pagelevel restore
showpage
%%EOF
