<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title>The PIA, an XML-based platform for Web Applications</title>
</head><body marginwidth="0">
<h1>The PIA, an XML-based platform for Web Applications</h1>
<!-- Slides for XTech2000 -->
<p> Automatically generated
    <if> &docName; <then>from <a href="&docName;">&docName;</a></then></if>
    &year;-&month;-&day; &hour;:&minute; by &user.name;
</p>
<set name="hh">500</set>

<slide><!-- title slide: no top caption. -->
<p> &nbsp;</p>
<div align='center' valign='center'>
<font size='+2'> <strong>The PIA</strong></font><br />
<font size='+2'> <strong>an XML-based platform for Web Applications</strong></font><br />
<p><img src="Images/Logos/pia150.gif" /></p>
<table border="0" cellspacing="5" >
  <tr>
     <td>
	Stephen Savitzky<br />
	Chief Software Scientist<br />
	Ricoh Silicon Valley<br />
	<font size="-1"><code>&lt;steve@rsv.ricoh.com&gt;</code></font>
     </td>
     <td align="left" valign="top">
	<table cellpadding='0' cellspacing='0' border='0'>
	    <tr nowrap nobr><th><a href='http://rsv.ricoh.com/'><img
		 src='Images/Logos/ricoh.gif' border='0' width='170'
		 height='48' alt='R I C O H'></a></th></tr> 
	    <tr nowrap nobr><td nowrap nobr><img
		 src='Images/Logos/blackline.gif'
		 height='2' width='170'></td></tr> 
	    <tr nowrap nobr><th align='left' valign='top'><img
		 src='Images/Logos/ricoh-silicon-valley.gif' border='0' 
		 alt='RICOH SILICON VALLEY' width='170' height='21'></th></tr>
	</table>
     </td>
  </tr>
</table>
</div>
</slide>

<slide><h2>Outline</h2>
<p> &nbsp;</p>
<ol>
  <li> Introduction: The need for cross-platform web applications
  </li>
  <li> How the PIA Works: using XML in a unique way
  </li>
  <li> Additional PIA features
  </li>
</ol>
</slide>

<slide><h2>Major Trends in Web Applications</h2>
<p> &nbsp;</p>

Web Applications
<ul>
  <li> Increasing Interactivity and Customizability
  </li>
  <li> Proliferation of Clients
  </li>
</ul>

Infrastructure:
<ul>
  <li> Proliferation of Platforms = ( server, OS, language )
  </li>
  <li> Proliferation of Development Environments
  </li>
  <li> Increasing use of Collaborative Development
  </li>
  <li> Increasing use of Open source
  </li>
  <li> Increasing use of XML
  </li>
</ul>
</slide>

<slide><h2>Challenges for Web Application Developers</h2>
<ul>
  <li> Which platform?
  </li>
  <li> Which development environment?
  </li>
  <li> How do programmers and content authors collaborate?
  </li>
  <li> How to maintain / customize applications?
  </li>
</ul>
    <img src="Images/platform-cube.png" align=right />
</slide>

<slide><h2>The Typical Web Application</h2>
<p> <img src="Images/web-app.png" />
</p>
<p> HTML documents for content, ``code'' for actions. 
</p>
</slide>

<slide><h2>PIA: an XML-Based Web Application Framework</h2>
<p> <img src="Images/pia-app.png" />
</p>
<p> XML documents for <em>both</em> content and actions.
</p>
</slide>

<slide><h2>A new design approach</h2>

<ul>
  <li> Uses a <strong>single XML-based language</strong> for :
       <ul>
	 <li> document markup (content) and data
	 </li>
	 <li> -- the ``conventional'' use for XML
	 </li>
	 <li> behavior -- <em>very unconventional</em>
	 </li>
       </ul>
  </li>
  <li> <strong>XML is a representation for parse trees</strong>
  </li>
  <li> The unique part is specifying behavior as well as style<br />
       by assigning <em>actions</em> to tags.
       <ul>
	 <li> Can design an application-specific tag set
	 </li>
	 <li> Can process same document in multiple ways
	 </li>
       </ul>
  </li>
  <li> <em>in effect, we've extended a stylesheet processor<br />
       to interpret a <strong>complete</strong> scripting language.</em>
       <ul>
	 <li> ... no !~+-*^%$#@ operators, no ( parentheses )
	 </li>
       </ul>
  </li>
  <li> We also use document elements as data structures.<br />
       <em>what one might call <strong>document-oriented</strong>,<br />
       as opposed to object-oriented, programming.</em>
  </li>
</ul>
</slide>



<set name="label">form-sample</set>
<slide><h2>Let's see how we develop a typical page </h2>
<p> &nbsp;
</p>

<h3>Day of the week</h3>
<form action="&url;#form-sample" method="post">
<table align="center" border=2>
  <tr><th colspan="2"><h3 align="center">A Simple Form</h3></th>
  </tr>
 <tr>
   <td>year:</td><td><input name="year" value="&year;" /></td>
 </tr>
 <tr>
   <td>month:</td><td> <input name="month" value="&month;" /></td>
 </tr>
 <tr>
   <td>day:</td><td>  <input name="day" value="&day;" /></td>
 </tr>
 <tr>
   <td><input type="submit" value="day of week"/></td>
   <td> <weekday><if>&queryString;<then>
       <year><get name="FORM:year" /></year>
       <month><get name="FORM:month" /></month>
       <day><get name="FORM:day" /></day></then></if>
 </weekday><!-- === need link to the calendar page as well === -->
   </td>
 </tr>
</table>
</form>

</slide>

<slide><h2>Here's the XML for that page</h2>

<define element="x">
  <action><font color="#009900"><b>&content;</b></font></action>
</define>

<define element="y">
  <action><font color="#000099"><b>&content;</b></font></action>
</define>

<define element="z">
  <action><font color="#990000"><b>&content;</b></font></action>
</define>

<pre>
<x>&lt;h3></x>Day of the week<x>&lt;/h3></x>
<x>&lt;form action="&amp;DOC:url;"></x>
  &lt;heading>A Simple Form&lt;/heading> 
  &lt;numeric-input name="year" default="&amp;year;"/>
  &lt;numeric-input name="month" default="&amp;month;"/>
  &lt;numeric-input name="day" default="&amp;day;"/>
  &lt;form-submit name="day of week" />
  &lt;if-form-submitted>
     &lt;weekday>
       &lt;year>&amp;FORM:year;&lt;/year>
       &lt;month>&amp;FORM:month;&lt;/month>
       &lt;day>&amp;FORM:day;&lt;/day>
     &lt;/weekday>
  &lt;/if-form-submitted>
&lt;/form>
</pre>
<x>parts look like plain HTML</x>...
</slide>

<slide><h2>Here's the XML for that page</h2>

<pre>
&lt;h3>Day of the week&lt;/h3>
&lt;form action="&amp;DOC:url;">
  <x>&lt;heading>A Simple Form&lt;/heading> 
  &lt;numeric-input name="year" default="&amp;year;"/>
  &lt;numeric-input name="month" default="&amp;month;"/>
  &lt;numeric-input name="day" default="&amp;day;"/>
  &lt;form-submit name="day of week" /></x>
  &lt;if-form-submitted>
     &lt;weekday>
       &lt;year>&amp;FORM:year;&lt;/year>
       &lt;month>&amp;FORM:month;&lt;/month>
       &lt;day>&amp;FORM:day;&lt;/day>
     &lt;/weekday>
  &lt;/if-form-submitted>
<x>&lt;/form></x>
</pre>
<x>other parts are application-specific</x>...
</slide>


<slide><h2>Here's the XML for that page</h2>

<pre>
&lt;h3>Day of the week&lt;/h3>
&lt;form action="&amp;DOC:url;">
  &lt;heading>A Simple Form&lt;/heading> 
  &lt;numeric-input name="year" default="&amp;year;"/>
  &lt;numeric-input name="month" default="&amp;month;"/>
  &lt;numeric-input name="day" default="&amp;day;"/>
  &lt;form-submit name="day of week" />
  <x>&lt;if-form-submitted>
     &lt;weekday>
       &lt;year>&amp;FORM:year;&lt;/year>
       &lt;month>&amp;FORM:month;&lt;/month>
       &lt;day>&amp;FORM:day;&lt;/day>
     &lt;/weekday>
  &lt;/if-form-submitted></x>
&lt;/form>
</pre>
<x>some tags perform processing</x>...
</slide>


<slide><h2>Processing is controlled by a tagset</h2>
<p> ... that contains definitions for all the tags
</p>
<p> <img src="Images/pia-app.png" />
</p>
</slide>

<slide><h2>The tagset specifies what each tag does </h2>
<p> here's a typical tag definition
</p>
<pre>
<x>&lt;define element="if-form-submitted"
        syntax="quoted"&gt;</x>
  <y>&lt;doc&gt; expand the content if responding
	to a form submission (query)
  &lt;/doc&gt;</y>
  <z>&lt;action&gt;
    &lt;if&gt;&lt;get name="queryString"/&gt;
        &lt;then&gt;
	  &lt;expand&gt;&lt;get name="content"/&gt;
          &lt;/expand&gt;
	&lt;/then&gt;
    &lt;/if&gt;
  &lt;/action&gt;</z>
<x>&lt;/define&gt;</x>
</pre>

<p> A tagset is simply another XML document </p>
</slide>

<slide><h2>Some tags are ``primitives'' </h2>

(A <em>primitive</em> is a tag defined by implementation code rather than
defined in terms of XML.)

<pre>
&lt;define element="if"
        <font color="#009900"><b>class="ifHandler"</b></font>&gt;
  &lt;doc> Expand the "then" sub-element
	if the condition is true
	(i.e. expands to something
	other than whitespace).
  &lt;/doc>
&lt;/define>
</pre>

<p> <font color="#009900"><code>class</code> attribute specifies the Java
    ``handler'' class for this primitive.</font>
</p>
</slide>


<slide><h2>The set of primitives is small</h2>
<p> &nbsp; </p>
<ul>
  <li> &lt;define&gt;
       (<small>&lt;action&gt;  &lt;value&gt;  &lt;doc&gt;</small> )
  </li>
  <li> &lt;if&gt; (<small> &lt;test&gt;  &lt;then&gt;  &lt;else&gt; </small>)
  </li>
  <li> &lt;repeat&gt;
       (<small> &lt;for&gt; &lt;foreach&gt; &lt;while&gt;
       &lt;until&gt; &lt;first&gt; &lt;finally&gt; </small>)
  </li>
  <li> &lt;extract&gt; (<small> &lt;from&gt; &lt;child&gt; &lt;name&gt;
       ... </small> )
  </li>
  <li> &lt;make&gt; / &lt;do&gt; / &lt;namespace&gt; / &lt;properties&gt; /
       &lt;tagset&gt; 
  </li>
  <li> &lt;get&gt; / &lt;set&gt; / &lt;let&gt; / &lt;bind&gt;
  </li>
  <li> &lt;include&gt; / &lt;write&gt; / &lt;status&gt; / &lt;connect&gt;
  </li>
  <li> &lt;numeric&gt; / &lt;logical&gt; / &lt;text&gt; 
  </li>
  <li> &lt;protect&gt; / &lt;expand&gt; / &lt;hide&gt;
  </li>
  <li> &lt;sql&gt; / &lt;sign&gt; / &lt;sendmail&gt; 
  </li>
  <li> &lt;date&gt; / &lt;url&gt; 
  </li>
</ul>
<p> About 30 primitive operations, comprising a <em>complete</em> language. 
</p>
</slide>


<slide><h2>Many domain-specific vocabularies</h2>
<dl>
  <dt> For office forms
  </dt>
  <dd> &lt;numeric-input&gt; / &lt;text-input&gt; / &lt;selection&gt;
       / &lt;signature&gt; / &lt;forms-pending&gt; &lt;notify&gt;

       <pre>&lt;numeric-input name="month" 
               default="&amp;month;"
               min="1" "max="12" /&gt;       </pre>
  </dd>
  <dt> For a datebook
  </dt>
  <dd> &lt;weekday&gt; / &lt;calendar-row&gt; / &lt;show-month&gt; /
       &lt;show-one-day&gt; / &lt;get-appointments&gt;

       <pre>&lt;get-appointments
             day="&amp;day;" 
             month="&amp;month;" 
             year="&amp;year;"</pre>
  </dd>
</dl>
</slide>


<slide><h2>Now let's look at data</h2>
<p> &nbsp;
</p>
<ul>
  <li> An application is more than just a single page
  </li>
  <li> We have to define the site structure<br />
       <code>http://risource.org/Calendar/month</code><br />
       <code>http://risource.org/Calendar/1999</code><br />
  </li>
  <li> ... and define which tag definitions to use for each document
  </li>
  <li> The PIA also does <em>this</em> using XML
  </li>
</ul>

</slide>


<slide><h2>Site Structure may get complicated</h2>
<img src="Images/site.png" />

</slide>

<slide><h2>Site structure defined by XML</h2>
<div align="center">Where to find the files</div>

<pre>
<x>&lt;Container file="~/Calendar"
	   virtual="/PIA/Apps/Calendar"&gt;</x>

  &lt;Ext name="xh"	
       type="text/html"
       tagset="Calendar-xhtml" /&gt;

  &lt;AGENT name="Calendar" time="0042"&gt;
     &lt;initialize&gt;
        &lt;user-message&gt;  Calendar initialized
	&lt;/user-message&gt;
     &lt;/initialize&gt;
     &lt;daily-action&gt;
  &lt;/AGENT&gt;
&lt;/Container&gt;
</pre>

</slide>

<slide><h2>Site structure defined by XML</h2>
<div align="center">how to map file types to tagsets</div>
<pre>
&lt;Container file="~/Calendar"
	   virtual="~/PIA/Apps/Calendar"&gt;
<font color="#009900"><b>
  &lt;Ext name="xh"	
       type="text/html"
       tagset="Calendar-xhtml"/&gt;</b></font>

  &lt;AGENT name="Calendar" hour="00"&gt;
     &lt;initialize&gt;
        &lt;user-message&gt;  Calendar initialized
	&lt;/user-message&gt;
     &lt;/initialize&gt;
     &lt;daily-action&gt;
  &lt;/AGENT&gt;
&lt;/Container&gt;
</pre>
</slide>

<slide><h2>Site structure defined by XML</h2>
<div align="center">Agent runs at midnight</div>
<pre>
&lt;Container file="~/Calendar"
	   virtual="~/PIA/Apps/Calendar">

  &lt;Ext name="xh"	
       type="text/html"
       tagset="Calendar-xhtml"	/>
<x>
  &lt;AGENT name="Calendar" hour="00">
     &lt;initialize>
        &lt;user-message>  Calendar initialized
	&lt;/user-message>
     &lt;/initialize>
     &lt;daily-action>
  &lt;/AGENT></x>
&lt;/Container>
</pre>
<p> <em>Not</em> using a DTD or PI's in the document.
</p>
</slide>


<slide><h2>Tree-Structured Data Guarantees Well-formedness</h2>
<p> &nbsp; </p>

<p> <strong>The PIA's internal representation is parse trees</strong>
</p>
<ul>
  <li> W3C's <a href="http://www.w3.org/DOM/">DOM</a>
       (Document Object Model) -- widely available.
  </li>
  <li> All operations preserve structure
  </li>
       <ul>
	 <li> Impossible to produce ill-formed output
	 </li>
	 <li> Most other platforms use strings:<br />
	      <tt><font color="#CC0000">
	        &lt;h1&gt;&lt;em&gt;...&lt;/h1&gt;(oops!) &lt;/em&gt;
	      </font></tt>
	 </li>
	 <li> Like the difference between ``GOTO's'' and structured
	      programming. 
	 </li>
       </ul>
  <li> XML documents have a natural tree structure<br />
       that is exactly what the author intended<br />
       and that the PIA's operations understand.
  </li>
</ul>
</slide>



<slide><h2>Platform-Neutral Processing</h2>
<p> &nbsp; </p>
<ul>
  <li> Easy to merge two PIA-based applications
  </li>
  <li> ... or to mix with an existing application on any platform
  </li>
  <li> Standard API's for server-based platforms
       <ul>
	 <li> Apache module
	 </li>
	 <li> Java Servlet
	 </li>
	 <li> Cocoon Processor
	 </li>
       </ul>
  </li>
</ul>
</slide>

<slide><h2>Portable Implementation</h2>
<p> &nbsp; </p>
<ul>
  <li> Reference version written in Java for portability
  </li>
  <li> simple processing core
       <ul>
	 <li> Small number of primitive tag handlers
	 </li>
	 <li> Easy re-implemented in other languages
	 </li>
	 <li> (C port already in progress)
	 </li>
       </ul>
  </li>
  <li> Standard API's for non-server applications
       <ul>
	 <li> SAX (Simple API for XML)
	 </li>
	 <li> DOM (Document Object Model)
	 </li>
       </ul>
  </li>
</ul>
</slide>

<slide><h2>Other PIA Components</h2>
<p> &nbsp; </p>
<p> (You can read about these on <a href="http://RiSource.org/PIA/">the web
    site</a>)
</p>
<ul>
  <li> Pluggable parsers and formatters
       <ul>
	 <li> HTML as well as XML
	 </li>
	 <li> Coexists well with other platforms
	 </li>
       </ul>
  </li>
  <li> Versatile site structure definition package
       <ul>
	 <li> Includes XML (WebDAV-ready) metadata
	 </li>
	 <li> Provides ``symbolic links'' or aliases
	 </li>
	 <li> Allows read-only directories with local overrides
	 </li>
	 <li> Hides file extensions (<code>foo</code>, not
	      <code>foo.html</code>) 
	 </li>
       </ul>
  </li>
  <li> Server / proxy with XML ``agents''
       <ul>
	 <li> Useful for prototyping and testing
	 </li>
	 <li> Good platform for single user/small group applications
	 </li>
	 <li> Written in Java for portability
	 </li>
       </ul>
  </li>
  <li> Offline document processor
  </li>
</ul>
</slide>


<slide><h2>Summary: Answering the Challenges</h2>
<ul>
  <li> Which platform?
       <ul>
	 <li> Whichever one you prefer: PIA applications are portable.
	 </li> 
	 <li> Open Source processing engine
	 </li>
	 <ul>
	   <li> eliminates dependence on proprietary technology
	   <li> can be integrated with any server engine 
	   <li> or other XML applications
	 </ul> 
       </ul>
  </li>
  <li> How to collaborate?
       <ul>
	 <li> Shared editing of XML documents 
	 </li>
	 <li> using domain-specific tags provided by programmers
	 </li>
	 <li> Integrating applications by merging documents
	 </li>
	 <li> Open source developer community at
	      <a href="http://RiSource.org/"><font
	      face="Verdana, Arial, Helvetica, sans-serif"
	      color="#993300">Ri</font><font
	      face="Verdana, Arial, Helvetica, sans-serif"
	      color="black"><i>Source.org</i></font></a>
	 </li>
       </ul>
  </li>
  <li> Which development environment?
       <ul>
	 <li> Whichever one makes sense <em>for each collaborator</em>.
	 </li>
       </ul>
  </li>
  <li> How to maintain / customize applications?
       <ul>
	 <li> Modify, extend the XML documents 
	 </li>
	 <li> supported by mainstream editors and specialized clients
	 </li>
       </ul>
  </li>
</ul>
</slide>

<slide><h2>Status and Resources</h2>
<p> &nbsp;
</p>
<ul>
  <li> Open source at <a href="http://RiSource.org/"><font
          face="Verdana, Arial, Helvetica, sans-serif"
          color="#993300">Ri</font><font
          face="Verdana, Arial, Helvetica, sans-serif"
          color="black"><i>Source.org</i></font></a><a
          href="http://RiSource.org/PIA/">/PIA/</a> 
       <ul>
	 <li> Version 2.1 (first stable release) released 2000-2-29
	 </li>
	 <li> Interactive demo/tutorial server at
	      <a href="http://pia.rsv.ricoh.com/Tutorial/home"
	      >pia.rsv.ricoh.com/Tutorial/home</a>
	 </li>
	 <li> Open-source collaboration on web applications
	 </li>
	 <li> Free collection of customizable apps
	 </li>
       </ul>
  </li>
  <li> C port in progress via <a
       href="http://www.sourcexchange.com/">SOURCEXCHANGE</a>.
       
       <ul>
	 <li> Current status at <a
	      href="http://sourcexchange.com/ProjectDetail?projectID=6">
	      sourcexchange.com/ProjectDetail?projectID=6</a>
	 </li>
       </ul>
  </li>
</ul>
</slide>


<slide><h2>Appendix: PIA Features</h2>
<p> &nbsp;</p>
<ul>
  <li> Uses a single XML-based language for :
       <ul>
	 <li> document markup (content)
	 </li>
	 <li> data -- the ``conventional'' use for XML
	 </li>
	 <li> behavior -- <em>very unconventional</em><br />

	      <em>in a way, we are abusing a stylesheet language to make it
	      interpret scripts</em>
	 </li>
       </ul>
  </li>
  <li> Applications consist entirely of XML documents
       <ul>
	 <li> Makes applications portable
	 </li>
	 <li> Supports collaborative (open source) development
	 </li>
       </ul>
  </li>
  <li> Small, simple document-processing engine<br />
       Versatile site-description package
       <ul>
	 <li> easily integrated into many platforms
	 </li>
	 <li> Open source code available on the net
	 </li>
       </ul>
  </li>
</ul>
</slide>


<slide><h2>Comparison to PHP3</h2>
<p> and other platforms that embed code in web pages
</p>

<table border=1>
  <tr>
    <th></th> <th align="left">PIA</th> <th align="left">PHP3</th>
  </tr>
  <tr>
    <th align="left"> data representation
    </th>
    <td> parse trees
    </td>
    <td> strings
    </td>
  </tr>
  <tr>
    <th align="left"> can serve invalid pages
    </th>
    <td> no
    </td>
    <td> yes
    </td>
  </tr>
  <tr>
    <th align="left"> domain-specific tags
    </th>
    <td> yes
    </td>
    <td> no
    </td>
  </tr>
  <tr>
    <th align="left"> syntax
    </th>
    <td> XML
    </td>
    <td> C-like
    </td>
  </tr>
  <tr>
    <th align="left"> semantics
    </th>
    <td> macro expansions
    </td>
    <td> procedural
    </td>
  </tr>
  <tr>
    <th align="left"> separate actions from documents
    </th>
    <td> optional <br />
	 (design decision)
    </td>
    <td> no
    </td>
  </tr>
  <tr>
    <th align="left"> secure imported documents
    </th>
    <td> yes: restrict tags
    </td>
    <td> no
    </td>
  </tr>
</table>

</slide>

<slide><h2>Comparison to XSLT</h2>
<p> and other stylesheet-based publishing systems
</p>

<table border=1>
  <tr>
    <th></th>
    <th align="left">PIA</th> <th align="left">XSLT</th>
  </tr>
  <tr>
    <th align="left"> complete scripting language
    </th>
    <td> yes
    </td>
    <td> no
    </td>
  </tr>
  <tr>
    <td align="right"> numeric expressions
    </td>
    <td> yes
    </td>
    <td> no
    </td>
  </tr>
  <tr>
    <td align="right"> text processing
    </td>
    <td> yes
    </td>
    <td> no
    </td>
  </tr>
  <tr>
    <td align="right"> variables
    </td>
    <td> yes
    </td>
    <td> no
    </td>
  </tr>
  <tr>
    <th align="left"> local substitutions
    </th>
    <td> yes
    </td>
    <td> no (XPointer is <br />
	 non- local)
    </td>
  </tr>
  <tr>
    <th align="left"> embed actions in documents
    </th>
    <td> optional <br />
	 (design decision)
    </td>
    <td> no
    </td>
  </tr>
  <tr>
    <th align="left"> supports legacy (HTML) docs
    </th>
    <td> yes
    </td>
    <td> no
    </td>
  </tr>
</table>
</slide>

<set name="label">TOC</set>
<slide><h2>Table of Contents</h2>
<ol>
  &slidelist;
</ol>
</slide>

<hr>
<b>Copyright &copy; &year; Ricoh Silicon Valley</b><br>
<b>$Id$</b><br>
<address><a href="http://rsv.ricoh.com/~steve/"
         >Stephen R. Savitzky</a> &lt;<a href="mailto:steve@rsv.ricoh.com"
         >steve@rsv.ricoh.com</a>&gt;</address>
</body></html>
