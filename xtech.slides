<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title>The PIA, an XML-based platform for Web Applications</title>
</head><body marginwidth="0">
<h1>The PIA, an XML-based platform for Web Applications</h1>
<!-- Slides for XTech2000 -->
<p> Automatically generated
    <if> &docName; <then>from <a href="&docName;">&docName;</a></then></if>
    &year;-&month;-&day; &hour;:&minute; by &user.name;
</p>
<pre>
5 min: introduction.
	mention that it's an
        unconventional application for XML

10 min: an actual (tiny) application.
	tagsets, application-specific tags
	site structure

5 min: other aspects
	both embedded-code and defined tags
	support for legacy HTML; other parsers
	ability to repurpose code
</pre>

<slide><!-- title slide: no top caption. -->
<p> &nbsp;</p>
<div align='center' valign='center'>
<font size='+2'> <strong>The PIA</strong></font><br />
<font size='+2'> <strong>an XML-based platform for Web Applications</strong></font><br />
<p><img src="Images/Logos/pia150.gif" /></p>
<table border="0" cellspacing="5" >
  <tr>
     <td>
	Stephen Savitzky<br />
	Chief Software Scientist<br />
	Ricoh Silicon Valley<br />
	<font size="-1"><code>&lt;steve@rsv.ricoh.com&gt;</code></font>
     </td>
     <td align="left" valign="top">
	<table cellpadding='0' cellspacing='0' border='0'>
	    <tr nowrap nobr><th><a href='http://rsv.ricoh.com/'><img
		 src='Images/Logos/ricoh.gif' border='0' width='170'
		 height='48' alt='R I C O H'></a></th></tr> 
	    <tr nowrap nobr><td nowrap nobr><img
		 src='Images/Logos/blackline.gif'
		 height='2' width='170'></td></tr> 
	    <tr nowrap nobr><th align='left' valign='top'><img
		 src='Images/Logos/ricoh-silicon-valley.gif' border='0' 
		 alt='RICOH SILICON VALLEY' width='170' height='21'></th></tr>
	</table>
     </td>
  </tr>
</table>
</div>
</slide>

<slide><h2>Outline</h2>
<p> &nbsp;</p>
<ol>
  <li> Introduction: trends in web applications
  </li>
  <li> How the PIA Works
  </li>
  <li> Additional PIA features
  </li>
</ol>
</slide>

<slide><h2>Major Trends in Web Applications</h2>
<p> &nbsp;</p>

Web Applications
<ul>
  <li> Increasing Customization and Interaction
  </li>
  <li> Proliferation of Clients
  </li>
</ul>

Infrastructure:
<ul>
  <li> Proliferation of Platforms = ( server, OS, language )
  </li>
  <li> Proliferation of Development Environments
  </li>
  <li> Increasing use of Collaborative Development
  </li>
  <li> Increasing use of Open source
  </li>
  <li> Increasing use of XML
  </li>
</ul>
</slide>

<slide><h2>Challenges for Web Application Developers</h2>
<ul>
  <li> Which platform?
  </li>
  <li> How do programmers and content authors collaborate?
  </li>
  <li> Which development environment?
  </li>
  <li> How to maintain / customize applications?
  </li>
</ul>
    <img src="Images/platform-cube.png" align=right />
</slide>

<slide><h2>The Typical Web Application</h2>
<p> <img src="Images/web-app.png" />
</p>
<p> HTML documents for content, ``code'' for actions. 
</p>
</slide>

<slide><h2>PIA: an XML-Based Web Application Framework</h2>
<p> <img src="Images/pia-app.png" />
</p>
<p> XML documents for <em>both</em> content and actions.
</p>
</slide>

<!-- === the next two slides may want to go further toward the end -->
<slide><h2>The PIA's Answers</h2>
<p> &nbsp;</p>
<ul>
  <li> Which platform?
       <ul>
	 <li> Whichever one you prefer: PIA applications are portable.
	 </li>
       </ul>
  </li>
  <li> How do programmers and content authors collaborate?
       <ul>
	 <li> Programmers create tag vocabularies
	 </li>
	 <li> Authors use these tags to create active documents
	 </li>
       </ul>
  </li>
  <li> Which development environment?
       <ul>
	 <li> Whichever one makes sense <em>for each collaborator</em>
	 </li>
	 <li> XML is tool-friendly; many good editors exist.
	 </li>
       </ul>
  </li>
  <li> How to maintain / customize applications?
       <ul>
	 <li> Edit simple XML documents with domain-specific markup.
	 </li>
	 <li> XML minimizes need for special skills, IT support. 
	 </li>
	 <li> PIA's processing engine is open source<br />
	      ... for easy customization of the code.
	 </li>
       </ul>
  </li>
</ul>
</slide>


<slide><h2>A new design approach</h2>

<p> <strong>We use XML for everything.</strong>
</p>

<ul>
  <li> The unique part is specifying behavior by assigning actions to tags.
  </li>
  <li> <em>in effect, we're abusing a stylesheet processor to interpret a
       scripting language.</em>
  </li>
  <li> We also use document elements as data structures.
  </li>
  <li> There is no separate scripting language.
  </li>
</ul>

<p> <strong>So, how does this work?</strong>
</p>
</slide>

<set name="label">form-sample</set>
<slide><h2>Let's see how we develop a typical page </h2>
<!-- === needs some kind of heading === -->
<form action="&url;#form-sample" method="post">
 year: <input name="year" value="&year;" /><br />
 month: <input name="month" value="&month;" /><br />
 day: <input name="day" value="&day;" /><br />
 <input type="submit" value="day of week"/>
  ... is
 <weekday><if>&queryString;<then>
       <year><get name="FORM:year" /></year>
       <month><get name="FORM:month" /></month>
       <day><get name="FORM:day" /></day></then></if>
 </weekday><!-- === need link to the calendar page as well === -->
</form>

</slide>

<slide><h2>Here's the XML for that page</h2>

<!-- with protect markup, the "pretty" doesn't add linebreaks;
     in fact, it does nothing at all.   But it fits on a smaller screen.
-->
<small>
<pretty><protect markup="markup">
<heading/>
<form action="&DOC:url;">
  year: <numeric-input name="year"/>
  month:
  <numeric-input name="month" default="&month;"/>
  day:
  <numeric-input name="day" default="&day;"/>
  <form-submit name="day of week" />
  <if-form-submitted>
     ... is 
     <weekday>
       <year><get name="FORM:year" /></year>
       <month><get name="FORM:month" /></month>
       <day><get name="FORM:day" /></day>
     </weekday>
  </if-form-submitted>
</form>
</protect></pretty>
</small>
</slide>


<slide><h2>Processing is controlled by a tagset</h2>
<p> ... that contains definitions for all the tags
</p>
<p> <img src="Images/pia-app.png" />
</p>
</slide>

<slide><h2>The tagset specifies what each tag does </h2>
<p> here's a typical tag definition
</p>
<pre>
<font color="#009900">&lt;define element="if-form-submitted"</font>
        quoted="yes">
  &lt;doc> expand the content if responding
	to a form submission (query)
  &lt;/doc>
  &lt;action>
    &lt;if>&lt;get name="queryString"/>
        &lt;then>
	  &lt;expand>&lt;get name="content"/>
          &lt;/expand>
	&lt;/then>
    &lt;/if>
  &lt;/action>
&lt;/define>
</pre>

<p> A tagset is simply another XML document </p>

</slide>

<slide><h2>Some tags are ``primitives'' </h2>

(A <em>primitive</em> is a tag defined by implementation code rather than
defined in terms of XML.)

<pre>
&lt;define element="if"
        <font color="#009900">class="ifHandler"</font>>
  &lt;doc> Expand the "then" sub-element
	if the condition is true
	(i.e. expands to something
	other than whitespace).
  &lt;/doc>
&lt;/define>
</pre>

<p> <font color="#009900"><code>class</code> attribute specifies the Java
    ``handler'' class for this primitive.
</p>
</slide>


<slide><h2>The set of primitives is small</h2>
<p> &nbsp; </p>
<ul>
  <li> &lt;define&gt;
       (<small>&lt;action&gt;  &lt;value&gt;  &lt;doc&gt;</small> )
  </li>
  <li> &lt;if&gt; (<small> &lt;test&gt;  &lt;then&gt;  &lt;else&gt; </small>)
  </li>
  <li> &lt;repeat&gt; (<small> &lt;for&gt; &lt;foreach&gt; &lt;while&gt;
       &lt;until&gt; &lt;first&gt; &lt;finally&gt; </small>)
  </li>
  <li> &lt;extract&gt; (<small> &lt;from&gt; &lt;child&gt; &lt;name&gt;
       ... </small> )
  </li>
  <li> &lt;make&gt; / &lt;do&gt; / &lt;namespace&gt; / &lt;properties&gt; /
       &lt;tagset&gt; 
  </li>
  <li> &lt;get&gt; / &lt;set&gt; / &lt;let&gt; / &lt;bind&gt;
  </li>
  <li> &lt;include&gt; / &lt;write&gt; / &lt;status&gt; / &lt;connect&gt;
  </li>
  <li> &lt;numeric&gt; / &lt;logical&gt; / &lt;text&gt; 
  </li>
  <li> &lt;protect&gt; / &lt;expand&gt; / &lt;hide&gt;
  </li>
  <li> &lt;sql&gt; / &lt;sign&gt; / &lt;sendmail&gt; 
  </li>
  <li> &lt;date&gt; / &lt;url&gt; 
  </li>
</ul>
<p> About 30 primitive operations, comprising a </em>complete<em> language. 
</p>
</slide>


<slide><h2>Many domain-specific vocabularies</h2>
<dl>
  <dt> For office forms
  </dt>
  <dd> &lt;numeric-input&gt; / &lt;text-input&gt; / &lt;selection&gt;
       / &lt;signature&gt; / &lt;forms-pending&gt; &lt;notify&gt;

       <pre>&lt;numeric-input name="month" 
               default="&amp;month;"
               min="1" "max="12" /&gt;       </pre>
  </dd>
  <dt> For a datebook
  </dt>
  <dd> &lt;weekday&gt; / &lt;calendar-row&gt; / &lt;show-month&gt; /
       &lt;show-one-day&gt; / &lt;get-appointments&gt;

       <pre>&lt;get-appointments
             day="&amp;day;" 
             month="&amp;month;" 
             year="&amp;year;"</pre>
  </dd>
</dl>
</slide>


<slide><h2>Site Structure</h2>
<!-- === needs a figure instead === -->

<ul>
  <li> ``real'' directory is read-write, for user data
  </li>
  <li> ``virtual'' directory for read-only files<br />
       (can be shared by all users)
  </li>
</ul>
</slide>

<slide><h2>Site structure defined by XML</h2>
<div align="center">Where to find the files</div>

<pre>
<font color="#009900">&lt;Container file="~/Calendar"
	   virtual="/PIA/Apps/Calendar"></font>

  &lt;Ext name="xh"	
       type="text/html"
       tagset="Calendar-xhtml"	/>

  &lt;AGENT name="Calendar" time="0042">
     &lt;initialize>
        &lt;user-message>  Calendar initialized
	&lt;/user-message>
     &lt;/initialize>
     &lt;daily-action>
  &lt;/AGENT>
&lt;/Container>
</pre>

</slide>

<slide><h2>Site structure defined by XML</h2>
<div align="center">how to map file types to tagsets</div>
<pre>
&lt;Container file="~/Calendar"
	   virtual="~/PIA/Apps/Calendar">
<font color="#009900">
  &lt;Ext name="xh"	
       type="text/html"
       tagset="Calendar-xhtml"	/></font>

  &lt;AGENT name="Calendar" hour="00">
     &lt;initialize>
        &lt;user-message>  Calendar initialized
	&lt;/user-message>
     &lt;/initialize>
     &lt;daily-action>
  &lt;/AGENT>
&lt;/Container>
</pre>
</slide>

<slide><h2>Site structure defined by XML</h2>
<div align="center">Agent runs at midnight</div>
<pre>
&lt;Container file="~/Calendar"
	   virtual="~/PIA/Apps/Calendar">

  &lt;Ext name="xh"	
       type="text/html"
       tagset="Calendar-xhtml"	/>
<font color="#009900">
  &lt;AGENT name="Calendar" hour="00">
     &lt;initialize>
        &lt;user-message>  Calendar initialized
	&lt;/user-message>
     &lt;/initialize>
     &lt;daily-action>
  &lt;/AGENT></font>
&lt;/Container>
</pre>
</slide>


<slide><h2>Tree-Structured Data</h2>
<p> &nbsp; </p>

<p> <strong>The PIA's internal representation is parse trees</strong>
</p>
<ul>
  <li> Infrastructure widely available:<br />
       closely related to W3C's <a href="http://www.w3.org/DOM/">DOM</a>
       (Document Object Model)
  </li>
  <li> All operations preserve the consistancy of the document's structure
  </li>
       <ul>
	 <li> Impossible to produce ill-structured output
	 </li>
	 <li> Most other platforms use strings:
	      <tt><font color="#CC0000">
	      &lt;h1&gt;&lt;em&gt;...&lt;/h1&gt;(oops!) &lt;/em&gt;
	      </font></tt>
	 </li>
	 <li> Like the difference between ``GOTO's'' and structured
	      programming. 
	 </li>
       </ul>
  <li> XML documents have a natural tree structure<br />
       that is exactly what the author intended<br />
       and that the PIA's operations understand.
  </li>
</ul>
</slide>


<slide><h2>Platform-Neutral</h2>
<p> &nbsp; </p>
<ul>
  <li> Reference version written in Java for portability
  </li>
       <ul>
	 <li> simple, portable processing core
	 </li>
	 <li> Small number of primitive tag handlers
	 </li>
       </ul>
  <li> Standard API's for server-based platforms
       <ul>
	 <li> Apache module
	 </li>
	 <li> Java Servlet
	 </li>
	 <li> Cocoon Processor
	 </li>
       </ul>
  </li>
  <li> Standard API's for non-server applications
       <ul>
	 <li> SAX (Simple API for XML)
	 </li>
	 <li> DOM (Document Object Model)
	 </li>
       </ul>
  </li>
</ul>
</slide>

<slide><h2>Other PIA Components</h2>
<p> &nbsp; </p>
<ul>
  <li> Pluggable parsers and formatters
       <ul>
	 <li> HTML parser as well as XML
	 </li>
	 <li> Coexists well with other platforms
	 </li>
       </ul>
  </li>
  <li> Versatile site structure definition package
       <ul>
	 <li> Includes XML (WebDAV-ready) metadata
	 </li>
	 <li> Provides ``symbolic links'' or aliases
	 </li>
	 <li> Allows read-only directories with local overrides
	 </li>
	 <li> Hides file extensions (<code>foo</code>, not
	      <code>foo.html</code>) 
	 </li>
       </ul>
  </li>
  <li> Server / proxy with XML ``agents''
       <ul>
	 <li> Useful for prototyping and testing
	 </li>
	 <li> Good platform for single user/small group applications
	 </li>
	 <li> Written in Java for portability
	 </li>
       </ul>
  </li>
  <li> Offline document processor
  </li>
</ul>
</slide>


<slide><h2>Comparison to PHP3</h2>
<p> and other platforms that embed code in web pages
</p>

<table border=1>
  <tr>
    <th></th> <th align="left">PIA</th> <th align="left">PHP3</th>
  </tr>
  <tr>
    <th align="left"> data representation
    </th>
    <td> parse trees
    </td>
    <td> strings
    </td>
  </tr>
  <tr>
    <th align="left"> can serve invalid pages
    </th>
    <td> no
    </td>
    <td> yes
    </td>
  </tr>
  <tr>
    <th align="left"> domain-specific tags
    </th>
    <td> yes
    </td>
    <td> no
    </td>
  </tr>
  <tr>
    <th align="left"> syntax
    </td>
    <td> XML
    </th>
    <td> C-like
    </td>
  </tr>
  <tr>
    <th align="left"> semantics
    </td>
    <td> macro expansions
    </th>
    <td> procedural
    </td>
  </tr>
  <tr>
    <th align="left"> secure imported documents
    </td>
    <td> yes: restrict tags
    </th>
    <td> no
    </td>
  </tr>
</table>

</slide>

<slide><h2>Comparison to XSLT</h2>
<p> and other stylesheet-based publishing systems
</p>

<table border=1>
  <tr>
    <th></th>
    <th align="left">PIA</th> <th align="left">XSLT</th>
  </tr>
  <tr>
    <th align="left"> complete scripting language
    </td>
    <td> yes
    </th>
    <td> no
    </td>
  </tr>
  <tr>
    <td align="right"> numeric expressions
    </td>
    <td> yes
    </th>
    <td> no
    </td>
  </tr>
  <tr>
    <td align="right"> text processing
    </td>
    <td> yes
    </th>
    <td> no
    </td>
  </tr>
  <tr>
    <td align="right"> variables
    </td>
    <td> yes
    </th>
    <td> no
    </td>
  </tr>
  <tr>
    <th align="left"> local substitutions
    </td>
    <td> yes
    </th>
    <td> no
    </td>
  </tr>
  <tr>
    <th align="left"> embed actions in documents
    </td>
    <td> yes
    </th>
    <td> no
    </td>
  </tr>
  <tr>
    <th align="left"> supports legacy (HTML) docs
    </td>
    <td> yes
    </th>
    <td> no
    </td>
  </tr>
</table>
</slide>

<slide><h2>Summary: PIA Features</h2>
<p> &nbsp;</p>
<ul>
  <li> Uses a single XML-based language for :
       <ul>
	 <li> document markup (content)
	 </li>
	 <li> data -- the ``conventional'' use for XML
	 </li>
	 <li> behavior -- <em>very unconventional</em><br />

	      <em>in a way, we are abusing a stylesheet language to make it
	      interpret scripts</em>
	 </li>
       </ul>
  </li>
  <li> Applications consist entirely of XML documents
       <ul>
	 <li> Makes applications portable
	 </li>
	 <li> Supports collaborative (open source) development
	 </li>
       </ul>
  </li>
  <li> Small, simple document-processing engine<br />
       Versatile site-description package
       <ul>
	 <li> easily integrated into many platforms
	 </li>
	 <li> Open source code available on the net
	 </li>
       </ul>
  </li>
  <li> <a href="http://RiSource.org/"><font
          face="Verdana, Arial, Helvetica, sans-serif"
          color="#993300">Ri</font><font
          face="Verdana, Arial, Helvetica, sans-serif"
          color="black"><i>Source.org</i></font></a>
       to coordinate open source community development
  </li>
</ul>
</slide>


<slide><h2>Status and Resources</h2>
<ul>
  <li> Open source at <a href="http://RiSource.org/"><font
          face="Verdana, Arial, Helvetica, sans-serif"
          color="#993300">Ri</font><font
          face="Verdana, Arial, Helvetica, sans-serif"
          color="black"><i>Source.org</i></font></a><a
          href="http://RiSource.org/PIA/">/PIA/</a> 
       <ul>
	 <li> Version 2.1 (first stable release) released 2000-2-28
	 </li>
	 <li> Interactive demo/tutorial server at
	      <a href="http://pia.rsv.ricoh.com/Tutorial/home"
	      >pia.rsv.ricoh.com/Tutorial/home</a>
	 </li>
	 <li> Open-source collaboration on web applications
	 </li>
	 <li> Free collection of customizable apps
	 </li>
       </ul>
  </li>
  <li> C port in progress via <a
       href="http://www.sourcexchange.com/">SOURCEXCHANGE</a>.
       
       <ul>
	 <li> Current status at <a
	      href="http://sourcexchange.com/ProjectDetail?projectID=6">
	      sourcexchange.com/ProjectDetail?projectID=6</a>
	 </li>
       </ul>
  </li>
</ul>
</slide>

<set name="label">TOC</set>
<slide><h2>Table of Contents</h2>
<ol>
  &slidelist;
</ol>
</slide>

<hr>
<b>Copyright &copy; &year; Ricoh Silicon Valley</b><br>
<b>$Id$</b><br>
<address><a href="http://rsv.ricoh.com/~steve/"
         >Stephen R. Savitzky</a> &lt;<a href="mailto:steve@rsv.ricoh.com"
         >steve@rsv.ricoh.com</a>&gt;</address>
</body></html>
